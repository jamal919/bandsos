{"version":3,"sources":["components/Navigation.js","images/level.svg","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Control","Navigation","extend","options","position","onAdd","map","controlName","container","DomUtil","create","this","_infoButton","_createButton","ReactDOMServer","renderToString","_goHome","onRemove","html","title","className","fn","context","link","innerHTML","href","stop","DomEvent","stopPropagation","on","preventDefault","console","log","createControlComponent","props","southWest","latLng","northEast","bounds","latLngBounds","icon_level","icon","iconUrl","marker_level","iconSize","Map","MapContainer","center","zoom","scrollWheelZoom","minZoom","maxZoom","style","width","height","LayersControl","BaseLayer","name","TileLayer","attribution","url","checked","Overlay","LayerGroup","bwdb","features","station","Marker","geometry","coordinates","Popup","properties","location","x","y","ScaleControl","metric","imperial","maxWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed61be5c.chunk.js","sourcesContent":["import { createControlComponent } from \"@react-leaflet/core\";\nimport { Control, DomUtil, DomEvent } from \"leaflet\";\nimport ReactDOMServer from 'react-dom/server';\nimport { FaHome, FaInfoCircle } from 'react-icons/fa';\n\nControl.Navigation = Control.extend({\n  options: {\n    position: \"topleft\",\n  },\n  onAdd: function (map) {\n    // const options = this.options;\n    const controlName = \"leaflet-control-navbar\";\n    const container = DomUtil.create(\"div\", controlName + \" leaflet-bar\");\n    this._infoButton = this._createButton(\n      ReactDOMServer.renderToString(<FaHome />),\n      \"Homepage\",\n      controlName + \"-home\",\n      container,\n      this._goHome\n    );\n    this._infoButton = this._createButton(\n      ReactDOMServer.renderToString(<FaInfoCircle />),\n      \"Information\",\n      controlName + \"-info\",\n      container,\n      this._goHome\n    );\n    return container;\n  },\n\n  onRemove: function (map) {},\n\n  _createButton: function (html, title, className, container, fn, context) {\n    var link = DomUtil.create(\"a\", className, container);\n    link.innerHTML = html;\n    link.href = \"#\";\n    link.title = title;\n\n    var stop = DomEvent.stopPropagation;\n\n    DomEvent.on(link, \"click\", stop)\n      .on(link, \"mousedown\", stop)\n      .on(link, \"dblclick\", stop)\n      .on(link, \"click\", DomEvent.preventDefault)\n      .on(link, \"click\", fn, context);\n\n    return link;\n  },\n  _goHome: function () {\n    console.log(\"Hello\");\n  },\n});\n\nexport const Navigation = createControlComponent(\n  (props) => new Control.Navigation(props)\n);\n","export default __webpack_public_path__ + \"static/media/level.610b15a1.svg\";","import {\n  MapContainer,\n  TileLayer,\n  LayersControl,\n  ScaleControl,\n  Marker,\n  LayerGroup,\n  Popup,\n} from \"react-leaflet\";\n\nimport { icon, latLng, latLngBounds } from \"leaflet\";\n\nimport { Navigation } from \"./Navigation\";\n\nimport marker_level from \"../images/level.svg\";\nimport bwdb from \"../layers/stations/bwdb.json\";\n\nconst position = [24, 90]; // Bangladesh\n\nvar southWest = latLng(11, 50),\n  northEast = latLng(28, 120),\n  bounds = latLngBounds(southWest, northEast);\n\nconst icon_level = icon({\n  iconUrl: marker_level,\n  iconSize: [24, 24],\n});\n\n// Check if an url exists\n// async function exists(url) {\n//     const result = await fetch(url, { method: 'HEAD' });\n//     return result.ok;\n//   }\n\n// Main component\nfunction Map(props) {\n  return (\n    <MapContainer\n      center={position}\n      bounds={bounds}\n      zoom={7}\n      scrollWheelZoom={true}\n      minZoom={6}\n      maxZoom={16}\n      style={{ width: \"100vw\", height: \"100vh\" }}\n    >\n      <Navigation></Navigation>\n      <LayersControl position=\"topright\">\n        <LayersControl.BaseLayer name=\"OSM - Standard\">\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n\n        <LayersControl.BaseLayer checked name=\"ESRI Satellite\">\n          <TileLayer\n            attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          />\n        </LayersControl.BaseLayer>\n\n        <LayersControl.Overlay checked name=\"BWDB\">\n          <LayerGroup>\n            {bwdb.features.map((station) => (\n              <Marker\n                position={[\n                  station.geometry.coordinates[1],\n                  station.geometry.coordinates[0],\n                ]}\n                icon={icon_level}\n              >\n                <Popup>\n                  Station Name: {station.properties.location} <br />\n                  Longitude: {station.properties.x} <br />\n                  Latitude: {station.properties.y} <br />\n                </Popup>\n              </Marker>\n            ))}\n          </LayerGroup>\n        </LayersControl.Overlay>\n      </LayersControl>\n\n      <ScaleControl\n        position=\"bottomright\"\n        metric={true}\n        imperial={true}\n        maxWidth={200}\n      ></ScaleControl>\n    </MapContainer>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport Map from \"./components/Map\";\n\n// Stylesheets\nimport \"leaflet/dist/leaflet.css\";\n\n// The main application\nexport default function App() {\n  return (\n    <div className=\"map_container\">\n      <Map></Map>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}